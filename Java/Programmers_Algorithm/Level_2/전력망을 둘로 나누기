import java.util.*;

class Solution {
    
    static List<Integer>[] graph;
    static boolean[] visited;
    
    public int solution(int n, int[][] wires) {
        
        graph = new ArrayList[n+1];
        int min = Integer.MAX_VALUE;
        
        for (int i=1; i<=n; i++) {
            graph[i] = new ArrayList<>();
        }
        
        for (int i=0; i<wires.length; i++) {
            graph[wires[i][0]].add(wires[i][1]);
            graph[wires[i][1]].add(wires[i][0]);
        }
        
        for (int i=0; i<wires.length; i++) {
            int v1 = wires[i][0];
            int v2 = wires[i][1];
            
            visited = new boolean[n+1];
            
            graph[v1].remove(Integer.valueOf(v2));
            graph[v2].remove(Integer.valueOf(v1));
            
            int count = dfs(1);
            
            int diff = Math.abs(count-(n-count));
            
            min = Math.min(min, diff);
            
            graph[v1].add(v2);
            graph[v2].add(v1);
        }
        
        return min;
    }
    
    private static int dfs (int v) {
        visited[v] = true;
        int count = 1;
        
        for (int next : graph[v]) {
            if (!visited[next]) {
                count += dfs(next);
            }
        }
        
        return count;
    }
}
